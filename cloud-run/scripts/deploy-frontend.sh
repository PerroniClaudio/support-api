#!/bin/bash
set -e

# 🚀 Spreetzitt Cloud Run - Deploy Solo Frontend  
# Deploy rapido del solo frontend React

echo "🚀 Deploy Frontend React"
echo "======================="

# Colori per output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funzioni helper
log_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Configurazione
PROJECT_ID=$(gcloud config get-value project)
REGION="europe-west8"
SERVICE_NAME="spreetzitt-frontend"

# Carica configurazione da .env.prod
load_config() {
    if [[ -f "config/.env.prod" ]]; then
        source config/.env.prod
        SERVICE_NAME=${FRONTEND_SERVICE_NAME:-$SERVICE_NAME}
        REGION=${GOOGLE_CLOUD_REGION:-$REGION}
    fi
}

# Verifica prerequisiti
check_prerequisites() {
    log_info "Verifico prerequisiti..."
    
    if [[ -z "$PROJECT_ID" ]]; then
        log_error "Progetto Google Cloud non configurato"
        exit 1
    fi
    
    if [[ ! -d "../frontend" ]]; then
        log_error "Directory frontend non trovata!"
        exit 1
    fi
    
    if [[ ! -f "../frontend/package.json" ]]; then
        log_error "package.json non trovato in frontend!"
        exit 1
    fi
    
    log_success "Prerequisiti verificati"
}

# Configura variabili ambiente per il build
setup_build_env() {
    log_info "Configurazione variabili ambiente per build..."
    
    # Carica .env.prod se disponibile
    if [[ -f "config/.env.prod" ]]; then
        source config/.env.prod
    fi
    
    # Configura VITE_API_URL se non specificato
    if [[ -z "$VITE_API_URL" ]]; then
        # Prova a ottenere URL del backend se deployato
        BACKEND_SERVICE=${BACKEND_SERVICE_NAME:-"spreetzitt-backend"}
        BACKEND_URL=$(gcloud run services describe "$BACKEND_SERVICE" --region="$REGION" --format="value(status.url)" 2>/dev/null || echo "")
        
        if [[ -n "$BACKEND_URL" ]]; then
            export VITE_API_URL="$BACKEND_URL"
            log_info "VITE_API_URL configurato automaticamente: $BACKEND_URL"
        else
            log_warning "VITE_API_URL non configurato e backend non trovato"
            read -p "Inserisci URL dell'API backend: " BACKEND_URL
            export VITE_API_URL="$BACKEND_URL"
        fi
    else
        export VITE_API_URL="$VITE_API_URL"
        log_info "VITE_API_URL: $VITE_API_URL"
    fi
    
    # Configura altre variabili Vite se presenti
    [[ -n "$VITE_APP_NAME" ]] && export VITE_APP_NAME="$VITE_APP_NAME"
}

# Crea .env.production temporaneo per il build
create_production_env() {
    log_info "Creo file .env.production per il build..."
    
    local ENV_FILE="../frontend/.env.production"
    
    cat > "$ENV_FILE" << EOF
# Generated by deploy script
VITE_API_URL=$VITE_API_URL
VITE_APP_NAME=${VITE_APP_NAME:-Spreetzitt}
EOF
    
    log_success "File .env.production creato"
}

# Deploy frontend
deploy_frontend() {
    log_info "Deploy frontend React in corso..."
    
    # Deploy
    gcloud run deploy $SERVICE_NAME \
        --source ../frontend \
        --region $REGION \
        --memory 512Mi \
        --cpu 1 \
        --concurrency 1000 \
        --timeout 60 \
        --min-instances 0 \
        --max-instances 5 \
        --allow-unauthenticated \
        --port 8080
    
    log_success "Frontend deployato con successo!"
}

# Test frontend
test_frontend() {
    log_info "Test frontend..."
    
    # Ottieni URL del servizio
    SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format="value(status.url)")
    
    if [[ -n "$SERVICE_URL" ]]; then
        log_info "URL Frontend: $SERVICE_URL"
        
        # Test homepage
        log_info "Test homepage..."
        if curl -s -I "$SERVICE_URL" | grep -q "200 OK"; then
            log_success "Frontend raggiungibile!"
        else
            log_warning "Frontend non raggiungibile"
        fi
        
        # Test health check se disponibile
        log_info "Test health check..."
        if curl -s "$SERVICE_URL/health" | grep -q "healthy"; then
            log_success "Health check OK!"
        else
            log_warning "Health check non disponibile (normale per SPA)"
        fi
    else
        log_error "Impossibile ottenere URL del servizio"
    fi
}

# Mostra logs
show_logs() {
    log_info "Mostra logs recenti..."
    gcloud run logs tail $SERVICE_NAME --region=$REGION --limit=50
}

# Mostra informazioni servizio
show_service_info() {
    log_info "Informazioni servizio:"
    gcloud run services describe $SERVICE_NAME --region=$REGION \
        --format="table(metadata.name,status.url,status.latestCreatedRevision,status.traffic[].percent)"
}

# Cleanup file temporanei
cleanup() {
    if [[ -f "../frontend/.env.production" ]]; then
        rm "../frontend/.env.production"
        log_info "File .env.production temporaneo rimosso"
    fi
}

# Trap per cleanup
trap cleanup EXIT

# Main execution
main() {
    load_config
    check_prerequisites
    setup_build_env
    
    log_warning "Stai per deployare il frontend su Google Cloud Run"
    log_info "Progetto: $PROJECT_ID"
    log_info "Servizio: $SERVICE_NAME"
    log_info "Region: $REGION"
    log_info "API URL: $VITE_API_URL"
    echo ""
    
    read -p "Confermi il deploy? (y/N): " CONFIRM
    
    if [[ ! $CONFIRM =~ ^[Yy]$ ]]; then
        log_info "Deploy annullato"
        exit 0
    fi
    
    create_production_env
    deploy_frontend
    test_frontend
    show_service_info
    
    echo ""
    log_success "🎉 Deploy frontend completato!"
    echo ""
    log_info "📋 Prossimi passi:"
    echo "   1. Testa l'applicazione usando l'URL sopra"
    echo "   2. Configura domini: ./dns-setup.sh"
    echo "   3. Verifica che l'API backend sia raggiungibile"
    echo ""
}

# Parsing argomenti
while [[ $# -gt 0 ]]; do
    case $1 in
        --logs)
            load_config
            show_logs
            exit 0
            ;;
        --info)
            load_config
            show_service_info
            exit 0
            ;;
        --test)
            load_config
            test_frontend
            exit 0
            ;;
        --help|-h)
            echo "Uso: $0 [opzioni]"
            echo ""
            echo "Opzioni:"
            echo "  --logs        Mostra logs del servizio"
            echo "  --info        Mostra informazioni servizio"
            echo "  --test        Test frontend"
            echo "  --help, -h    Mostra questo aiuto"
            exit 0
            ;;
        *)
            log_error "Opzione sconosciuta: $1"
            exit 1
            ;;
    esac
done

# Esegui main se nessun argomento
main
